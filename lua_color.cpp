////////////////////////////////////////////////////////////////////////////////
//INCLUDE FILES
////////////////////////////////////////////////////////////////////////////////
#include <arduino.h>
#include "src/color/color.h"
#include "spider.h"
#include "lua.h"
#include "lua_color.h"





////////////////////////////////////////////////////////////////////////////////
// ??
////////////////////////////////////////////////////////////////////////////////
static int color_palette(lua_State *lua) {
	int index			= luaL_checkinteger(lua, 1);
	lua_pushinteger(lua, color_t::palette(index & 0x0F));
	return 1;
}




////////////////////////////////////////////////////////////////////////////////
// ??
////////////////////////////////////////////////////////////////////////////////
static int color_get(lua_State *lua) {
	color_t	color		= luaL_checkcolor(lua, 1);
	lua_pushinteger(lua, (int32_t)color);
	return 1;
}




////////////////////////////////////////////////////////////////////////////////
// ??
////////////////////////////////////////////////////////////////////////////////
static int color_add(lua_State *lua) {
	color_t	color		= luaL_checkcolor(lua, 1);
	color_t	modify		= luaL_checkcolor(lua, 2);
	lua_pushinteger(lua, (int32_t)color.add(modify));
	return 1;
}




////////////////////////////////////////////////////////////////////////////////
// ??
////////////////////////////////////////////////////////////////////////////////
static int color_sub(lua_State *lua) {
	color_t	color		= luaL_checkcolor(lua, 1);
	color_t	modify		= luaL_checkcolor(lua, 2);
	lua_pushinteger(lua, (int32_t)color.sub(modify));
	return 1;
}




////////////////////////////////////////////////////////////////////////////////
// ??
////////////////////////////////////////////////////////////////////////////////
static int color_screen(lua_State *lua) {
	color_t	color		= luaL_checkcolor(lua, 1);
	color_t	modify		= luaL_checkcolor(lua, 2);
	lua_pushinteger(lua, (int32_t)color.screen(modify));
	return 1;
}




////////////////////////////////////////////////////////////////////////////////
// ??
////////////////////////////////////////////////////////////////////////////////
static int color_multiply(lua_State *lua) {
	color_t	color		= luaL_checkcolor(lua, 1);
	color_t	modify		= luaL_checkcolor(lua, 2);
	lua_pushinteger(lua, (int32_t)color.multiply(modify));
	return 1;
}




////////////////////////////////////////////////////////////////////////////////
// ??
////////////////////////////////////////////////////////////////////////////////
static int color_left(lua_State *lua) {
	color_t	color		= luaL_checkcolor(lua, 1);
	int		modify		= luaL_checkinteger(lua, 2);
	lua_pushinteger(lua, color.left(modify));
	return 1;
}




////////////////////////////////////////////////////////////////////////////////
// ??
////////////////////////////////////////////////////////////////////////////////
static int color_right(lua_State *lua) {
	color_t	color		= luaL_checkcolor(lua, 1);
	int		modify		= luaL_checkinteger(lua, 2);
	lua_pushinteger(lua, color.right(modify));
	return 1;
}




////////////////////////////////////////////////////////////////////////////////
// ??
////////////////////////////////////////////////////////////////////////////////
static int color_hex(lua_State *lua) {
	char buffer[10] = "";

	color_t	color	= luaL_checkcolor(lua, 1);

	if (lua_gettop(lua) > 1) {
		color.hex(
			buffer,
			(COLOR_HEX_TYPE) luaL_checkinteger(lua, 2)
		);
	} else {
		color.hex(buffer);
	}

	lua_pushstring(lua, buffer);

	return 1;
}




////////////////////////////////////////////////////////////////////////////////
// INIT LUA LED LIBRARY
////////////////////////////////////////////////////////////////////////////////
void lua_color_init(lua_State *lua) {

	//LED library
	static const struct luaL_Reg color_lib[] = {
		{"palette",	color_palette},
		{"get",		color_get},
		{"add",		color_add},
		{"sub",		color_sub},
		{"screen",	color_screen},
		{"multiply",color_multiply},
		{"left",	color_left},
		{"right",	color_right},
		{"hex",		color_hex},

		{NULL, NULL}
	};

	luaL_register(lua, "color", color_lib);
}
